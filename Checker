import grequests
import json
from pprint import pprint
import time
import pyperclip
from playsound import playsound

MP_Price = 7500000
MR_Price = 3500000

auc_requirements = {#"Aurora_Leggings_MP": {"item_name": "Aurora Leggings", "item_lore": "Mana Pool V", "price": MP_Price},
                    #"Terror_Leggings_MP": {"item_name": "Terror Leggings", "item_lore": "Mana Pool V", "price": MP_Price},
                    #"Hollow_Leggings_MP": {"item_name": "Hollow Leggings", "item_lore": "Mana Pool V", "price": MP_Price},
                    #"Fervor_Leggings_MP": {"item_name": "Fervor Leggings", "item_lore": "Mana Pool V", "price": MP_Price},
                    #"Crimson_Leggings_MP": {"item_name": "Crimson Leggings", "item_lore": "Mana Pool V", "price": MP_Price},
                    "Aurora_Boots_MP": {"item_name": "Aurora Boots", "item_lore": "Mana Pool V", "price": MP_Price},
                    "Terror_Boots_MP": {"item_name": "Terror Boots", "item_lore": "Mana Pool V", "price": MP_Price},
                    "Hollow_Boots_MP": {"item_name": "Hollow Boots", "item_lore": "Mana Pool V", "price": MP_Price},
                    "Fervor_Boots_MP": {"item_name": "Fervor Boots", "item_lore": "Mana Pool V", "price": MP_Price},
                    "Crimson_Boots_MP": {"item_name": "Crimson Boots", "item_lore": "Mana Pool V", "price": MP_Price},
                    #"Aurora_Leggings_MR": {"item_name": "Aurora Leggings", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    #"Terror_Leggings_MR": {"item_name": "Terror Leggings", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    #"Hollow_Leggings_MR": {"item_name": "Hollow Leggings", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    #"Fervor_Leggings_MR": {"item_name": "Fervor Leggings", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    #"Crimson_Leggings_MR": {"item_name": "Crimson Leggings", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    "Aurora_Boots_MR": {"item_name": "Aurora Boots", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    "Terror_Boots_MR": {"item_name": "Terror Boots", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    "Hollow_Boots_MR": {"item_name": "Hollow Boots", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    "Fervor_Boots_MR": {"item_name": "Fervor Boots", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    "Crimson_Boots_MR": {"item_name": "Crimson Boots", "item_lore": "Mana Regeneration V", "price": MR_Price},
                    }

#API_FILE = open("ed821f10-2f8b-43bb-89fa-a957bf4afb32.json", "r")
#API_KEY = json.loads(API_FILE.read())["ed821f10-2f8b-43bb-89fa-a957bf4afb32"]
API_KEY = "ed821f10-2f8b-43bb-89fa-a957bf4afb32"

data = {}
auction_final = []
auction_final_cheapest = {}
auction_final_cheapest_sorted = []

#start_time = time.time()

url_base = f"https://api.hypixel.net/skyblock/auctions?key={API_KEY}"

def checkAuctionItem(auction_item):

    # Check if item is BIN
    if("bin" not in auction_item):
        return (False, "Not BIN")

    # Check if item is already claimed
    if(auction_item["claimed"] == True):
        return (False, "Already claimed")

    # For unique obj ruleset
    for id in auc_requirements:
        if(auction_item["item_name"] == auc_requirements[id]["item_name"]):
            if(auction_item["bin"] == True):
                # Found a  match with a filter AND price! (Success)
                if("Mana Pool V" in auction_item["item_lore"] and "Mana Regeneration IV" in auction_item["item_lore"]):
                    if(auction_item["starting_bid"] < 9000000):
                        print(auction_item["item_name"])
                        dashed_uuid = auction_item['uuid'][:8] + '-' + auction_item['uuid'][8:12] + '-' + auction_item['uuid'][12:16]
                        dashed_uuid += '-' + auction_item['uuid'][16:20] + '-' + auction_item['uuid'][20:]
                        pyperclip.copy(f"viewauction {dashed_uuid}")
                        playsound(r"C:\Users\orcad\PycharmProjects\pythonProject\Prowler.mp3", False)
                        return (True, (id, f"/viewauction {dashed_uuid}", auction_item['starting_bid'], auction_item["item_name"]))
                if(auction_item["starting_bid"] < auc_requirements[id]["price"]):
                    if (auc_requirements[id]["item_lore"]) in auction_item["item_lore"]:
                        print(auction_item["item_name"])
                        dashed_uuid = auction_item['uuid'][:8] + '-' + auction_item['uuid'][8:12] + '-' + auction_item['uuid'][12:16]
                        dashed_uuid += '-' + auction_item['uuid'][16:20] + '-' + auction_item['uuid'][20:]
                        pyperclip.copy(f"viewauction {dashed_uuid}")
                        playsound(r"C:\Users\orcad\PycharmProjects\pythonProject\Prowler.mp3", False)
                        return (True, (id, f"/viewauction {dashed_uuid}", auction_item['starting_bid'], auction_item["item_name"]))


    # Broke on one of the requirements
    return (False, "Not all requirements met")


# Async to first page
while(True):
    resp = grequests.get(url_base)
    # Get page 0 (and pages count)
    for res in grequests.map([resp]):
        data = json.loads(res.content)
        total_pages = data['totalPages']
        print(f"Total Pages found: {data['totalPages']}")

        # Verify success
        if(data["success"]):
            # Get items from page 0
            for auction_item in data["auctions"]:
                item_ans = checkAuctionItem(auction_item)
                # Passed filter
                if(item_ans[0]):
                    auction_final.append(item_ans[1])
                # Failed filter
                else:
                    pass

        # Unsuccessful GET request
        else:
            print(f"Failed GET request: {data['cause']}")


    #first_page_time = time.time()

    # Get all page urls
    urls = []
    for page_count in range(1, total_pages+1):
        urls.append(f"{url_base}&page={page_count}")

    # Async to remaining pages
    resp = (grequests.get(url) for url in urls)
    print(resp)

    #made_requests_time = time.time()

    # Get items from remaining pages
    for res in grequests.map(resp):
        data = json.loads(res.content)

        # Verify success
        if(data["success"]):
            # Get items from pages 1 -> n
            for auction_item in data["auctions"]:
                item_ans = checkAuctionItem(auction_item)
                # Passed filter
                if(item_ans[0]):
                    auction_final.append(item_ans[1])
                # Failed filter
                else:
                    pass

        # Unsuccessful GET request
        else:
            print(f"Failed GET request: {data['cause']}")

    # Debug for amount of items found
    print(f"{len(auction_final)} items found")

    # Sort out the results
    auction_final = sorted(auction_final, key=lambda x: (x[0], x[2]))


    pprint(auction_final)

    #end_time = time.time()

    #print(f"Time Taken: {end_time-start_time}\n\tFirst Page: {first_page_time-start_time}\n\tFinished Requests: {made_requests_time-start_time}")

    time.sleep(15)
